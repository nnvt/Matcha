{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/divider/style\";\nimport _Divider from \"antd/lib/divider\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/avatar/style\";\nimport _Avatar from \"antd/lib/avatar\";\nimport \"antd/lib/collapse/style\";\nimport _Collapse from \"antd/lib/collapse\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\Matcha\\\\client\\\\src\\\\pages\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport Layout from \"../layout/default\";\nimport \"../assets/css/Profile.less\";\nimport { ReceivedMsg } from \"../components/ReceivedMsg\";\nimport { SentMsg } from \"../components/SentMsg\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Context } from \"../Contexts/Context\";\nimport { matchingAction, msgAction } from \"../actions/chatActions\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { socketConn as socket } from \"../sockets\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Panel\n} = _Collapse;\n\nconst Chat = () => {\n  _s();\n\n  const {\n    state\n  } = useContext(Context);\n  const [matchers, setMatchers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [activeChat, setActiveChat] = useState({\n    userid: null,\n    chatid: null\n  });\n  const [messageToSend, setMessageToSend] = useState(\"\");\n\n  const loadMessages = async () => {\n    const res = await msgAction(state.token, activeChat.chatid);\n\n    if (res && res.success) {\n      console.log(\"Loaded messages:\", res.data);\n      setMessages(res.data);\n    } else {\n      console.error(\"Failed to load messages:\", res);\n    }\n  };\n\n  const openChat = (userid, chatid) => {\n    setActiveChat({\n      userid: userid,\n      chatid: chatid\n    });\n    loadMessages();\n  };\n\n  const handlTyping = e => {\n    if (e.target.value !== \"\") {\n      setMessageToSend(e.target.value);\n      socket.emit(\"isTyping\", {\n        chatid: activeChat\n      });\n    }\n  };\n\n  const handleSendMsg = async () => {\n    socket.emit(\"sendMessage\", {\n      message: messageToSend,\n      sender: state.id,\n      receiver: activeChat.userid,\n      chat_id: activeChat.chatid\n    });\n    setTimeout(() => {\n      loadMessages();\n    }, 500);\n  };\n\n  useEffect(() => {\n    const Matchers = async () => {\n      const res = await matchingAction(state.token);\n      setMatchers(res.users);\n    };\n\n    Matchers();\n    return () => {\n      setMatchers([]);\n    }; // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    socket.on(\"newMessage\", data => {\n      if (data.chat_id === activeChat.chatid) {\n        setMessages(prevMessages => [...prevMessages, data.message]);\n      }\n    });\n    return () => {\n      socket.off(\"newMessage\");\n    };\n  }, [messages, activeChat.chatid]);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(_Row, {\n      justify: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(_Col, {\n        lg: 8,\n        span: 24,\n        style: {\n          padding: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(_Collapse, {\n          defaultActiveKey: [\"0\"],\n          accordion: true,\n          style: {\n            borderRadius: \"15px\",\n            overflow: \"auto\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Panel, {\n            header: \"Conversations :\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                padding: \"0px\",\n                height: \"700px\",\n                maxHeight: 700,\n                overflowY: \"auto\",\n                textAlign: \"center\",\n                borderRadius: \"30px\"\n              },\n              children: matchers.map(item => /*#__PURE__*/_jsxDEV(_Card, {\n                hoverable: true,\n                onClick: () => openChat(item.id, item.chatid),\n                style: {\n                  width: \"100%\",\n                  borderRadius: \"10px\",\n                  marginBottom: \"15px\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(_Row, {\n                  align: \"middle\",\n                  children: [/*#__PURE__*/_jsxDEV(_Avatar, {\n                    src: \"http://localhost:3001/api/\" + item.profile\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 119,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                    style: {\n                      marginBottom: \"0px\",\n                      marginLeft: \"10px\"\n                    },\n                    children: [item.lastname, \"_\", item.firstname]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this)\n          }, \"0\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Col, {\n        lg: 14,\n        span: 24,\n        style: {\n          height: \"800px\",\n          padding: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(_Card, {\n          style: {\n            width: \"100%\",\n            borderRadius: \"15px\",\n            height: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(_Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(_Card, {\n            style: {\n              marginBottom: \"15px\",\n              border: \"none\",\n              maxHeight: 550,\n              minHeight: 550,\n              overflow: \"scroll\",\n              overflowX: \"hidden\"\n            },\n            children: messages.map(item => item.user_id === state.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(SentMsg, {\n                message: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 21\n              }, this)\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(ReceivedMsg, {\n                message: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 21\n              }, this)\n            }, void 0, false))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), activeChat.chatid !== null ? /*#__PURE__*/_jsxDEV(_Row, {\n            type: \"flex\",\n            style: {\n              alignItems: \"center\",\n              border: \"1px solid #cdcd\",\n              padding: \"5px\",\n              borderRadius: \"15px\",\n              width: \"100%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(_Col, {\n              xs: 19,\n              md: 22,\n              span: 20,\n              children: /*#__PURE__*/_jsxDEV(_Input, {\n                onChange: e => handlTyping(e),\n                className: \"input-reply\",\n                maxLength: 100,\n                style: {\n                  borderRadius: \"13px\",\n                  height: \"80px\",\n                  border: \"none\",\n                  outline: \"none\"\n                },\n                placeholder: \"Type a message here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(_Col, {\n              xs: 4,\n              md: 2,\n              span: 2,\n              children: /*#__PURE__*/_jsxDEV(_Button, {\n                type: \"primary\",\n                shape: \"circle\",\n                onClick: () => handleSendMsg(),\n                icon: /*#__PURE__*/_jsxDEV(SendOutlined, {\n                  style: {\n                    fontSize: \"0.8rem\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this) : \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"CRs6BFOHuiAZgCl5MVlD3cLL8vU=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/ADMIN/Desktop/Matcha/client/src/pages/Chat.js"],"names":["Layout","ReceivedMsg","SentMsg","SendOutlined","Context","matchingAction","msgAction","useContext","useEffect","useState","socketConn","socket","Panel","Chat","state","matchers","setMatchers","messages","setMessages","activeChat","setActiveChat","userid","chatid","messageToSend","setMessageToSend","loadMessages","res","token","success","console","log","data","error","openChat","handlTyping","e","target","value","emit","handleSendMsg","message","sender","id","receiver","chat_id","setTimeout","Matchers","users","on","prevMessages","off","padding","borderRadius","overflow","height","maxHeight","overflowY","textAlign","map","item","width","marginBottom","profile","marginLeft","lastname","firstname","border","minHeight","overflowX","user_id","alignItems","outline","fontSize"],"mappings":"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","sourcesContent":["import Layout from \"../layout/default\";\r\nimport \"../assets/css/Profile.less\";\r\nimport { Row, Col, Card, Avatar, Divider, Collapse, Button, Input } from \"antd\";\r\n\r\nimport { ReceivedMsg } from \"../components/ReceivedMsg\";\r\nimport { SentMsg } from \"../components/SentMsg\";\r\nimport { SendOutlined } from \"@ant-design/icons\";\r\nimport { Context } from \"../Contexts/Context\";\r\nimport { matchingAction, msgAction } from \"../actions/chatActions\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { socketConn as socket } from \"../sockets\";\r\n\r\nconst { Panel } = Collapse;\r\nconst Chat = () => {\r\n  const { state } = useContext(Context);\r\n\r\n  const [matchers, setMatchers] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [activeChat, setActiveChat] = useState({\r\n    userid: null,\r\n    chatid: null,\r\n  });\r\n  const [messageToSend, setMessageToSend] = useState(\"\");\r\n\r\n  const loadMessages = async () => {\r\n    const res = await msgAction(state.token, activeChat.chatid);\r\n    if (res && res.success) {\r\n      console.log(\"Loaded messages:\", res.data);\r\n      setMessages(res.data);\r\n    } else {\r\n      console.error(\"Failed to load messages:\", res);\r\n    }\r\n  };\r\n\r\n\r\n  const openChat = (userid, chatid) => {\r\n    setActiveChat({\r\n      userid: userid,\r\n      chatid: chatid,\r\n    });\r\n\r\n    loadMessages();\r\n  };\r\n\r\n  const handlTyping = (e) => {\r\n    if (e.target.value !== \"\") {\r\n      setMessageToSend(e.target.value);\r\n      socket.emit(\"isTyping\", { chatid: activeChat });\r\n    }\r\n  };\r\n\r\n  const handleSendMsg = async () => {\r\n    socket.emit(\"sendMessage\", {\r\n      message: messageToSend,\r\n      sender: state.id,\r\n      receiver: activeChat.userid,\r\n      chat_id: activeChat.chatid,\r\n    });\r\n    setTimeout(() => {\r\n      loadMessages();\r\n    }, 500);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const Matchers = async () => {\r\n      const res = await matchingAction(state.token);\r\n      setMatchers(res.users);\r\n    };\r\n    Matchers();\r\n    return () => {\r\n      setMatchers([]);\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"newMessage\", (data) => {\r\n      if (data.chat_id === activeChat.chatid) {\r\n        setMessages((prevMessages) => [...prevMessages, data.message]);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"newMessage\");\r\n    };\r\n  }, [messages, activeChat.chatid]);\r\n\r\n  return (\r\n    <Layout>\r\n      <Row justify=\"center\">\r\n        <Col lg={8} span={24} style={{ padding: \"10px\" }}>\r\n          <Collapse\r\n            defaultActiveKey={[\"0\"]}\r\n            accordion\r\n            style={{ borderRadius: \"15px\", overflow: \"auto\" }}\r\n          >\r\n            <Panel header=\"Conversations :\" key=\"0\">\r\n              <div\r\n                style={{\r\n                  padding: \"0px\",\r\n                  height: \"700px\",\r\n                  maxHeight: 700,\r\n                  overflowY: \"auto\",\r\n                  textAlign: \"center\",\r\n                  borderRadius: \"30px\",\r\n                }}\r\n              >\r\n                {matchers.map((item) => (\r\n                  <Card\r\n                    hoverable={true}\r\n                    onClick={() => openChat(item.id, item.chatid)}\r\n                    style={{\r\n                      width: \"100%\",\r\n                      borderRadius: \"10px\",\r\n                      marginBottom: \"15px\",\r\n                    }}\r\n                  >\r\n                    <Row align=\"middle\">\r\n                      <Avatar\r\n                        src={\"http://localhost:3001/api/\" + item.profile}\r\n                      />\r\n                      <h3 style={{ marginBottom: \"0px\", marginLeft: \"10px\" }}>\r\n                        {item.lastname}_{item.firstname}\r\n                      </h3>\r\n                    </Row>\r\n                    <div></div>\r\n                  </Card>\r\n                ))}\r\n              </div>\r\n            </Panel>\r\n          </Collapse>\r\n        </Col>\r\n        <Col lg={14} span={24} style={{ height: \"800px\", padding: \"10px\" }}>\r\n          <Card\r\n            style={{\r\n              width: \"100%\",\r\n              borderRadius: \"15px\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <Divider />\r\n            <Card\r\n              style={{\r\n                marginBottom: \"15px\",\r\n                border: \"none\",\r\n                maxHeight: 550,\r\n                minHeight: 550,\r\n                overflow: \"scroll\",\r\n                overflowX: \"hidden\",\r\n              }}\r\n            >\r\n              {messages.map((item) =>\r\n                item.user_id === state.id ? (\r\n                  <>\r\n                    <SentMsg message={item} />\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <ReceivedMsg message={item} />\r\n                  </>\r\n                )\r\n              )}\r\n            </Card>\r\n            {activeChat.chatid !== null ? (\r\n              <Row\r\n                type=\"flex\"\r\n                style={{\r\n                  alignItems: \"center\",\r\n                  border: \"1px solid #cdcd\",\r\n                  padding: \"5px\",\r\n                  borderRadius: \"15px\",\r\n                  width: \"100%\",\r\n                }}\r\n              >\r\n                <Col xs={19} md={22} span={20}>\r\n                  <Input\r\n                    onChange={(e) => handlTyping(e)}\r\n                    className=\"input-reply\"\r\n                    maxLength={100}\r\n                    style={{\r\n                      borderRadius: \"13px\",\r\n                      height: \"80px\",\r\n                      border: \"none\",\r\n                      outline: \"none\",\r\n                    }}\r\n                    placeholder=\"Type a message here\"\r\n                  />\r\n                </Col>\r\n                <Col xs={4} md={2} span={2}>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    onClick={() => handleSendMsg()}\r\n                    icon={<SendOutlined style={{ fontSize: \"0.8rem\" }} />}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}