{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\Matcha\\\\client\\\\src\\\\Routing\\\\PrivateRoute.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { checkTokenAction } from \"../actions/userAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  _s();\n\n  // Set initial state to handle loading and login status\n  const [loading, setLoading] = useState(true);\n  const [logged, setLogged] = useState(false);\n  useEffect(() => {\n    // Define async function to check token\n    async function fetchData() {\n      // Check if token is valid (true or false)\n      const res = await checkTokenAction(localStorage.getItem(\"token\")); // Update state based on the result\n\n      setLogged(res);\n      setLoading(false); // Set loading to false after checking the token\n    }\n\n    fetchData();\n  }, []); // Render based on loading and logged states\n\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => loading ?\n    /*#__PURE__*/\n    // Show a loading spinner or null when loading\n    _jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }, this) // Replace with a proper loader or spinner if needed\n    : logged ?\n    /*#__PURE__*/\n    // If logged in, render the protected component\n    _jsxDEV(Component, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this) :\n    /*#__PURE__*/\n    // If not logged in, redirect to login\n    _jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PrivateRoute, \"eTe6b4UlYBBu6xzntdPDm9Dw60s=\");\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["C:/Users/ADMIN/Desktop/Matcha/client/src/Routing/PrivateRoute.js"],"names":["React","useState","useEffect","Route","Redirect","checkTokenAction","PrivateRoute","component","Component","rest","loading","setLoading","logged","setLogged","fetchData","res","localStorage","getItem","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,gBAAT,QAAiC,uBAAjC;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AAAA;;AAC1D;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,KAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,mBAAeY,SAAf,GAA2B;AACzB;AACA,YAAMC,GAAG,GAAG,MAAMV,gBAAgB,CAACW,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAlC,CAFyB,CAIzB;;AACAJ,MAAAA,SAAS,CAACE,GAAD,CAAT;AACAJ,MAAAA,UAAU,CAAC,KAAD,CAAV,CANyB,CAMN;AACpB;;AAEDG,IAAAA,SAAS;AACV,GAZQ,EAYN,EAZM,CAAT,CAL0D,CAmB1D;;AACA,sBACE,QAAC,KAAD,OACML,IADN;AAEE,IAAA,MAAM,EAAGS,KAAD,IACNR,OAAO;AAAA;AACL;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFK,CAEiB;AAFjB,MAGHE,MAAM;AAAA;AACR;AACA,YAAC,SAAD,OAAeM;AAAf;AAAA;AAAA;AAAA;AAAA,YAFQ;AAAA;AAIR;AACA,YAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AAXN;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CArCD;;GAAMZ,Y;;KAAAA,Y;AAuCN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { checkTokenAction } from \"../actions/userAction\";\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  // Set initial state to handle loading and login status\r\n  const [loading, setLoading] = useState(true);\r\n  const [logged, setLogged] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Define async function to check token\r\n    async function fetchData() {\r\n      // Check if token is valid (true or false)\r\n      const res = await checkTokenAction(localStorage.getItem(\"token\"));\r\n\r\n      // Update state based on the result\r\n      setLogged(res);\r\n      setLoading(false); // Set loading to false after checking the token\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Render based on loading and logged states\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        loading ? (\r\n          // Show a loading spinner or null when loading\r\n          <div>Loading...</div> // Replace with a proper loader or spinner if needed\r\n        ) : logged ? (\r\n          // If logged in, render the protected component\r\n          <Component {...props} />\r\n        ) : (\r\n          // If not logged in, redirect to login\r\n          <Redirect to=\"/login\" />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n"]},"metadata":{},"sourceType":"module"}