{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/divider/style\";\nimport _Divider from \"antd/lib/divider\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/avatar/style\";\nimport _Avatar from \"antd/lib/avatar\";\nimport \"antd/lib/collapse/style\";\nimport _Collapse from \"antd/lib/collapse\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\Matcha\\\\client\\\\src\\\\pages\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { ReceivedMsg } from \"../components/ReceivedMsg\";\nimport { SentMsg } from \"../components/SentMsg\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Context } from \"../Contexts/Context\";\nimport { matchingAction, msgAction } from \"../actions/chatActions\";\nimport { socketConn as socket } from \"../sockets\";\nimport Layout from \"../layout/default\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Panel\n} = _Collapse;\n\nconst Chat = () => {\n  _s();\n\n  const {\n    state\n  } = useContext(Context);\n  const [matchers, setMatchers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [activeChat, setActiveChat] = useState({\n    userid: null,\n    chatid: null\n  });\n  const [messageToSend, setMessageToSend] = useState(\"\"); // Function to load messages for the active chat\n\n  const loadMessages = async () => {\n    console.log(\"Loading messages for chat ID:\", activeChat.chatid);\n\n    if (activeChat.chatid) {\n      const res = await msgAction(state.token, activeChat.chatid);\n      console.log(\"Response from msgAction:\", res);\n\n      if (res && res.success) {\n        console.log(\"Loaded messages: \", res.data);\n        setMessages(res.data);\n      } else {\n        console.error(\"Failed to load messages:\", res);\n      }\n    }\n  }; // Function to open a chat and set it as active\n\n\n  const openChat = (userid, chatid) => {\n    console.log(\"Opening chat with User ID:\", userid, \" and Chat ID:\", chatid);\n    setActiveChat({\n      userid,\n      chatid\n    });\n  }; // Handle typing event\n\n\n  const handleTyping = e => {\n    setMessageToSend(e.target.value);\n    console.log(\"Typing message:\", e.target.value);\n\n    if (e.target.value !== \"\") {\n      console.log(\"Emitting typing event for chat ID:\", activeChat.chatid);\n      socket.emit(\"isTyping\", {\n        chatid: activeChat.chatid\n      });\n    }\n  }; // Handle sending message\n\n\n  const handleSendMsg = () => {\n    if (messageToSend.trim() !== \"\") {\n      console.log(\"Sending message:\", messageToSend);\n      socket.emit(\"sendMessage\", {\n        message: messageToSend,\n        sender: state.id,\n        receiver: activeChat.userid,\n        chat_id: activeChat.chatid\n      });\n      setMessageToSend(\"\");\n      setTimeout(() => {\n        loadMessages();\n      }, 1000); // Adjust timeout if needed\n    }\n  }; // Fetch matched users when component mounts\n\n\n  useEffect(() => {\n    console.log(\"Fetching matched users...\");\n\n    const fetchMatchers = async () => {\n      console.log(\"State Token: \", state.token); // Log the token to verify\n\n      const res = await matchingAction(state.token);\n      console.log(\"Response from matchingAction:\", res);\n\n      if (res && res.success && res.users && res.users.length > 0) {\n        setMatchers(res.users);\n      } else {\n        console.error(\"No matched users found or an error occurred:\", res);\n      }\n    };\n\n    fetchMatchers();\n  }, [state.token]); // Set up socket listener for new messages\n\n  useEffect(() => {\n    console.log(\"Setting up socket listener for new messages...\");\n    socket.on(\"newMessage\", data => {\n      console.log(\"New message received via socket:\", data);\n\n      if (data.chat_id === activeChat.chatid) {\n        setMessages(prevMessages => [...prevMessages, data.message]);\n      }\n    });\n    return () => {\n      console.log(\"Cleaning up socket listener for new messages...\");\n      socket.off(\"newMessage\");\n    };\n  }, [messages, activeChat.chatid]);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(_Row, {\n      justify: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(_Col, {\n        lg: 8,\n        span: 24,\n        style: {\n          padding: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(_Collapse, {\n          defaultActiveKey: [\"0\"],\n          accordion: true,\n          style: {\n            borderRadius: \"15px\",\n            overflow: \"auto\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Panel, {\n            header: \"Conversations :\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                padding: \"0px\",\n                height: \"700px\",\n                maxHeight: 700,\n                overflowY: \"auto\",\n                textAlign: \"center\",\n                borderRadius: \"30px\"\n              },\n              children: matchers.map(item => /*#__PURE__*/_jsxDEV(_Card, {\n                hoverable: true,\n                onClick: () => openChat(item.id, item.chatid),\n                style: {\n                  width: \"100%\",\n                  borderRadius: \"10px\",\n                  marginBottom: \"15px\"\n                },\n                children: /*#__PURE__*/_jsxDEV(_Row, {\n                  align: \"middle\",\n                  children: [/*#__PURE__*/_jsxDEV(_Avatar, {\n                    src: `http://localhost:3001/api/${item.profile}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                    style: {\n                      marginBottom: \"0px\",\n                      marginLeft: \"10px\"\n                    },\n                    children: [item.lastname, \"_\", item.firstname]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 138,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 21\n                }, this)\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this)\n          }, \"0\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Col, {\n        lg: 14,\n        span: 24,\n        style: {\n          height: \"800px\",\n          padding: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(_Card, {\n          style: {\n            width: \"100%\",\n            borderRadius: \"15px\",\n            height: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(_Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(_Card, {\n            style: {\n              marginBottom: \"15px\",\n              border: \"none\",\n              maxHeight: 550,\n              minHeight: 550,\n              overflow: \"scroll\",\n              overflowX: \"hidden\"\n            },\n            children: messages.map(item => item.user_id === state.id ? /*#__PURE__*/_jsxDEV(SentMsg, {\n              message: item\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(ReceivedMsg, {\n              message: item\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), activeChat.chatid && /*#__PURE__*/_jsxDEV(_Row, {\n            type: \"flex\",\n            style: {\n              alignItems: \"center\",\n              border: \"1px solid #cdcd\",\n              padding: \"5px\",\n              borderRadius: \"15px\",\n              width: \"100%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(_Col, {\n              xs: 19,\n              md: 22,\n              span: 20,\n              children: /*#__PURE__*/_jsxDEV(_Input, {\n                value: messageToSend,\n                onChange: handleTyping,\n                className: \"input-reply\",\n                maxLength: 100,\n                style: {\n                  borderRadius: \"13px\",\n                  height: \"80px\",\n                  border: \"none\",\n                  outline: \"none\"\n                },\n                placeholder: \"Type a message here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(_Col, {\n              xs: 4,\n              md: 2,\n              span: 2,\n              children: /*#__PURE__*/_jsxDEV(_Button, {\n                type: \"primary\",\n                shape: \"circle\",\n                onClick: handleSendMsg,\n                icon: /*#__PURE__*/_jsxDEV(SendOutlined, {\n                  style: {\n                    fontSize: \"0.8rem\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"CRs6BFOHuiAZgCl5MVlD3cLL8vU=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/ADMIN/Desktop/Matcha/client/src/pages/Chat.js"],"names":["React","useContext","useEffect","useState","ReceivedMsg","SentMsg","SendOutlined","Context","matchingAction","msgAction","socketConn","socket","Layout","Panel","Chat","state","matchers","setMatchers","messages","setMessages","activeChat","setActiveChat","userid","chatid","messageToSend","setMessageToSend","loadMessages","console","log","res","token","success","data","error","openChat","handleTyping","e","target","value","emit","handleSendMsg","trim","message","sender","id","receiver","chat_id","setTimeout","fetchMatchers","users","length","on","prevMessages","off","padding","borderRadius","overflow","height","maxHeight","overflowY","textAlign","map","item","width","marginBottom","profile","marginLeft","lastname","firstname","border","minHeight","overflowX","user_id","alignItems","outline","fontSize"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Row, Col, Card, Avatar, Divider, Collapse, Button, Input } from \"antd\";\r\nimport { ReceivedMsg } from \"../components/ReceivedMsg\";\r\nimport { SentMsg } from \"../components/SentMsg\";\r\nimport { SendOutlined } from \"@ant-design/icons\";\r\nimport { Context } from \"../Contexts/Context\";\r\nimport { matchingAction, msgAction } from \"../actions/chatActions\";\r\nimport { socketConn as socket } from \"../sockets\";\r\nimport Layout from \"../layout/default\";\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst Chat = () => {\r\n  const { state } = useContext(Context);\r\n  const [matchers, setMatchers] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [activeChat, setActiveChat] = useState({\r\n    userid: null,\r\n    chatid: null,\r\n  });\r\n  const [messageToSend, setMessageToSend] = useState(\"\");\r\n\r\n  // Function to load messages for the active chat\r\n  const loadMessages = async () => {\r\n    console.log(\"Loading messages for chat ID:\", activeChat.chatid);\r\n    if (activeChat.chatid) {\r\n      const res = await msgAction(state.token, activeChat.chatid);\r\n      console.log(\"Response from msgAction:\", res);\r\n      if (res && res.success) {\r\n        console.log(\"Loaded messages: \", res.data);\r\n        setMessages(res.data);\r\n      } else {\r\n        console.error(\"Failed to load messages:\", res);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Function to open a chat and set it as active\r\n  const openChat = (userid, chatid) => {\r\n    console.log(\"Opening chat with User ID:\", userid, \" and Chat ID:\", chatid);\r\n    setActiveChat({ userid, chatid });\r\n  };\r\n\r\n  // Handle typing event\r\n  const handleTyping = (e) => {\r\n    setMessageToSend(e.target.value);\r\n    console.log(\"Typing message:\", e.target.value);\r\n    if (e.target.value !== \"\") {\r\n      console.log(\"Emitting typing event for chat ID:\", activeChat.chatid);\r\n      socket.emit(\"isTyping\", { chatid: activeChat.chatid });\r\n    }\r\n  };\r\n\r\n  // Handle sending message\r\n  const handleSendMsg = () => {\r\n    if (messageToSend.trim() !== \"\") {\r\n      console.log(\"Sending message:\", messageToSend);\r\n      socket.emit(\"sendMessage\", {\r\n        message: messageToSend,\r\n        sender: state.id,\r\n        receiver: activeChat.userid,\r\n        chat_id: activeChat.chatid,\r\n      });\r\n      setMessageToSend(\"\");\r\n      setTimeout(() => {\r\n        loadMessages();\r\n      }, 1000); // Adjust timeout if needed\r\n    }\r\n  };\r\n\r\n  // Fetch matched users when component mounts\r\n  useEffect(() => {\r\n    console.log(\"Fetching matched users...\");\r\n    const fetchMatchers = async () => {\r\n      console.log(\"State Token: \", state.token); // Log the token to verify\r\n      const res = await matchingAction(state.token);\r\n      console.log(\"Response from matchingAction:\", res);\r\n      if (res && res.success && res.users && res.users.length > 0) {\r\n        setMatchers(res.users);\r\n      } else {\r\n        console.error(\"No matched users found or an error occurred:\", res);\r\n      }\r\n    };\r\n    fetchMatchers();\r\n  }, [state.token]);\r\n\r\n\r\n  // Set up socket listener for new messages\r\n  useEffect(() => {\r\n    console.log(\"Setting up socket listener for new messages...\");\r\n    socket.on(\"newMessage\", (data) => {\r\n      console.log(\"New message received via socket:\", data);\r\n      if (data.chat_id === activeChat.chatid) {\r\n        setMessages((prevMessages) => [...prevMessages, data.message]);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      console.log(\"Cleaning up socket listener for new messages...\");\r\n      socket.off(\"newMessage\");\r\n    };\r\n  }, [messages, activeChat.chatid]);\r\n\r\n  return (\r\n    <Layout>\r\n      <Row justify=\"center\">\r\n        {/* Sidebar for conversations */}\r\n        <Col lg={8} span={24} style={{ padding: \"10px\" }}>\r\n          <Collapse\r\n            defaultActiveKey={[\"0\"]}\r\n            accordion\r\n            style={{ borderRadius: \"15px\", overflow: \"auto\" }}\r\n          >\r\n            <Panel header=\"Conversations :\" key=\"0\">\r\n              <div\r\n                style={{\r\n                  padding: \"0px\",\r\n                  height: \"700px\",\r\n                  maxHeight: 700,\r\n                  overflowY: \"auto\",\r\n                  textAlign: \"center\",\r\n                  borderRadius: \"30px\",\r\n                }}\r\n              >\r\n                {matchers.map((item) => (\r\n                  <Card\r\n                    key={item.id}\r\n                    hoverable\r\n                    onClick={() => openChat(item.id, item.chatid)}\r\n                    style={{\r\n                      width: \"100%\",\r\n                      borderRadius: \"10px\",\r\n                      marginBottom: \"15px\",\r\n                    }}\r\n                  >\r\n                    <Row align=\"middle\">\r\n                      <Avatar src={`http://localhost:3001/api/${item.profile}`} />\r\n                      <h3 style={{ marginBottom: \"0px\", marginLeft: \"10px\" }}>\r\n                        {item.lastname}_{item.firstname}\r\n                      </h3>\r\n                    </Row>\r\n                  </Card>\r\n                ))}\r\n              </div>\r\n            </Panel>\r\n          </Collapse>\r\n        </Col>\r\n\r\n        {/* Main chat area */}\r\n        <Col lg={14} span={24} style={{ height: \"800px\", padding: \"10px\" }}>\r\n          <Card style={{ width: \"100%\", borderRadius: \"15px\", height: \"100%\" }}>\r\n            <Divider />\r\n            <Card\r\n              style={{\r\n                marginBottom: \"15px\",\r\n                border: \"none\",\r\n                maxHeight: 550,\r\n                minHeight: 550,\r\n                overflow: \"scroll\",\r\n                overflowX: \"hidden\",\r\n              }}\r\n            >\r\n              {/* Render messages */}\r\n              {messages.map((item) =>\r\n                item.user_id === state.id ? (\r\n                  <SentMsg key={item.id} message={item} />\r\n                ) : (\r\n                  <ReceivedMsg key={item.id} message={item} />\r\n                )\r\n              )}\r\n            </Card>\r\n\r\n            {/* Input area for sending messages */}\r\n            {activeChat.chatid && (\r\n              <Row\r\n                type=\"flex\"\r\n                style={{\r\n                  alignItems: \"center\",\r\n                  border: \"1px solid #cdcd\",\r\n                  padding: \"5px\",\r\n                  borderRadius: \"15px\",\r\n                  width: \"100%\",\r\n                }}\r\n              >\r\n                <Col xs={19} md={22} span={20}>\r\n                  <Input\r\n                    value={messageToSend}\r\n                    onChange={handleTyping}\r\n                    className=\"input-reply\"\r\n                    maxLength={100}\r\n                    style={{\r\n                      borderRadius: \"13px\",\r\n                      height: \"80px\",\r\n                      border: \"none\",\r\n                      outline: \"none\",\r\n                    }}\r\n                    placeholder=\"Type a message here\"\r\n                  />\r\n                </Col>\r\n                <Col xs={4} md={2} span={2}>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    onClick={handleSendMsg}\r\n                    icon={<SendOutlined style={{ fontSize: \"0.8rem\" }} />}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}